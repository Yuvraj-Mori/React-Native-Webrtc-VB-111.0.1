{"version":3,"names":["NativeModules","RTCRtpCodecCapability","WebRTCModule","RTCRtpCapabilities","constructor","codecs","_defineProperty","_codecs","Object","freeze","getCapabilities","endpoint","capabilities","senderGetCapabilities","receiverGetCapabilities","TypeError","DEFAULT_AUDIO_CAPABILITIES","mimeType","senderCapabilities","receiverCapabilities"],"sources":["RTCRtpCapabilities.ts"],"sourcesContent":["import { NativeModules } from 'react-native';\n\nimport RTCRtpCodecCapability from './RTCRtpCodecCapability';\nconst { WebRTCModule } = NativeModules;\n\n/**\n * @brief represents codec capabilities for senders and receivers. Currently\n * this only supports codec names and does not have other\n * fields like clockRate and numChannels and such.\n */\nexport default class RTCRtpCapabilities {\n    _codecs: RTCRtpCodecCapability[] = [];\n    constructor(codecs: RTCRtpCodecCapability[]) {\n        this._codecs = codecs;\n        Object.freeze(this);\n    }\n\n    get codecs() {\n        return this._codecs;\n    }\n}\n\n\nfunction getCapabilities(endpoint: 'sender' | 'receiver'): RTCRtpCapabilities | null {\n    switch (endpoint) {\n        case 'sender': {\n            const capabilities = WebRTCModule.senderGetCapabilities();\n\n            if (!capabilities) {\n                return null;\n            }\n\n            return new RTCRtpCapabilities(capabilities.codecs);\n        }\n\n        case 'receiver': {\n            const capabilities = WebRTCModule.receiverGetCapabilities();\n\n            if (!capabilities) {\n                return null;\n            }\n\n            return new RTCRtpCapabilities(capabilities.codecs);\n        }\n\n        default:\n            throw new TypeError('Invalid endpoint: ' + endpoint);\n    }\n}\n\n\n/**\n * Hardcoded audio capabilities based on the WebRTC native documentation:\n * https://webrtc.github.io/webrtc-org/faq/. The mime type is specified in\n * https://www.iana.org/assignments/rtp-parameters/rtp-parameters.xhtml#rtp-parameters-2.\n */\nexport const DEFAULT_AUDIO_CAPABILITIES = new RTCRtpCapabilities([\n    new RTCRtpCodecCapability({ mimeType: 'audio/G722' }),\n    new RTCRtpCodecCapability({ mimeType: 'audio/iLBC' }),\n]);\n\n// Initialize capabilities on module import\nexport const senderCapabilities = getCapabilities('sender');\nexport const receiverCapabilities = getCapabilities('receiver');\n\n"],"mappings":";;;AAAA,SAASA,aAAa,QAAQ,cAAc;AAE5C,OAAOC,qBAAqB,MAAM,yBAAyB;AAC3D,MAAM;EAAEC;AAAa,CAAC,GAAGF,aAAa;;AAEtC;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMG,kBAAkB,CAAC;EAEpCC,WAAWA,CAACC,MAA+B,EAAE;IAAAC,eAAA,kBADV,EAAE;IAEjC,IAAI,CAACC,OAAO,GAAGF,MAAM;IACrBG,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EACvB;EAEA,IAAIJ,MAAMA,CAAA,EAAG;IACT,OAAO,IAAI,CAACE,OAAO;EACvB;AACJ;AAGA,SAASG,eAAeA,CAACC,QAA+B,EAA6B;EACjF,QAAQA,QAAQ;IACZ,KAAK,QAAQ;MAAE;QACX,MAAMC,YAAY,GAAGV,YAAY,CAACW,qBAAqB,CAAC,CAAC;QAEzD,IAAI,CAACD,YAAY,EAAE;UACf,OAAO,IAAI;QACf;QAEA,OAAO,IAAIT,kBAAkB,CAACS,YAAY,CAACP,MAAM,CAAC;MACtD;IAEA,KAAK,UAAU;MAAE;QACb,MAAMO,YAAY,GAAGV,YAAY,CAACY,uBAAuB,CAAC,CAAC;QAE3D,IAAI,CAACF,YAAY,EAAE;UACf,OAAO,IAAI;QACf;QAEA,OAAO,IAAIT,kBAAkB,CAACS,YAAY,CAACP,MAAM,CAAC;MACtD;IAEA;MACI,MAAM,IAAIU,SAAS,CAAC,oBAAoB,GAAGJ,QAAQ,CAAC;EAC5D;AACJ;;AAGA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,0BAA0B,GAAG,IAAIb,kBAAkB,CAAC,CAC7D,IAAIF,qBAAqB,CAAC;EAAEgB,QAAQ,EAAE;AAAa,CAAC,CAAC,EACrD,IAAIhB,qBAAqB,CAAC;EAAEgB,QAAQ,EAAE;AAAa,CAAC,CAAC,CACxD,CAAC;;AAEF;AACA,OAAO,MAAMC,kBAAkB,GAAGR,eAAe,CAAC,QAAQ,CAAC;AAC3D,OAAO,MAAMS,oBAAoB,GAAGT,eAAe,CAAC,UAAU,CAAC"}