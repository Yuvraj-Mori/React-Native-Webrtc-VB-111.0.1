{"version":3,"names":["defineCustomEventTarget","NativeModules","addListener","removeListener","Logger","MediaStream","MediaStreamTrack","MediaStreamTrackEvent","RTCDataChannel","RTCDataChannelEvent","RTCEvent","RTCIceCandidate","RTCIceCandidateEvent","RTCRtpReceiveParameters","RTCRtpReceiver","RTCRtpSendParameters","RTCRtpSender","RTCRtpTransceiver","RTCSessionDescription","RTCTrackEvent","RTCUtil","log","WebRTCModule","PEER_CONNECTION_EVENTS","nextPeerConnectionId","RTCPeerConnection","constructor","configuration","_defineProperty","_pcId","peerConnectionInit","_transceivers","_remoteStreams","Map","_pendingTrackEvents","_registerEvents","debug","createOffer","options","sdpInfo","transceiversInfo","peerConnectionCreateOffer","normalizeOfferOptions","_updateTransceivers","createAnswer","peerConnectionCreateAnswer","setConfiguration","peerConnectionSetConfiguration","setLocalDescription","sessionDescription","_desc","desc","_sessionDescription$s","type","sdp","isSdpTypeValid","Error","peerConnectionSetLocalDescription","localDescription","setRemoteDescription","_sessionDescription$s2","_desc$type","Promise","reject","newTransceivers","peerConnectionSetRemoteDescription","remoteDescription","forEach","t","transceiverOrder","transceiver","newSender","sender","track","remoteTrack","receiver","newReceiver","newTransceiver","_insertTransceiverSorted","pendingTrackEvents","ev","getTransceivers","filter","id","_mid","mid","_currentDirection","currentDirection","_direction","direction","streams","map","streamInfo","has","streamId","stream","streamReactTag","tracks","set","get","_tracks","includes","push","eventData","dispatchEvent","_setMutedInternal","addIceCandidate","candidate","sdpMLineIndex","undefined","sdpMid","TypeError","newSdp","peerConnectionAddICECandidate","toJSON","addTrack","connectionState","_trackExists","_len","arguments","length","Array","_key","streamIds","s","result","peerConnectionAddTrack","existingSender","getSenders","_track","existingTransceiver","addTransceiver","source","init","src","trackId","peerConnectionAddTransceiver","removeTrack","_peerConnectionId","find","peerConnectionRemoveTrack","getStats","selector","data","peerConnectionGetStats","JSON","parse","senders","receivers","getReceivers","r","matches","sr","e","stopped","Boolean","close","peerConnectionClose","_ref","_setStopped","restartIce","peerConnectionRestartIce","pcId","iceConnectionState","peerConnectionDispose","signalingState","receiverId","values","trackIdx","indexOf","splice","iceGatheringState","channel","dataChannel","muted","createDataChannel","label","dataChannelDict","channelInfo","_sender$track","transceiverUpdates","removeStopped","update","transceiverId","_stopped","isStopped","_sender","_rtpParameters","senderRtpParameters","_receiver","receiverRtpParameters","order","sort","a","b"],"sources":["RTCPeerConnection.ts"],"sourcesContent":["\nimport { defineCustomEventTarget } from 'event-target-shim';\nimport { NativeModules } from 'react-native';\n\nimport { addListener, removeListener } from './EventEmitter';\nimport Logger from './Logger';\nimport MediaStream from './MediaStream';\nimport MediaStreamTrack from './MediaStreamTrack';\nimport MediaStreamTrackEvent from './MediaStreamTrackEvent';\nimport RTCDataChannel from './RTCDataChannel';\nimport RTCDataChannelEvent from './RTCDataChannelEvent';\nimport RTCEvent from './RTCEvent';\nimport RTCIceCandidate from './RTCIceCandidate';\nimport RTCIceCandidateEvent from './RTCIceCandidateEvent';\nimport RTCRtpReceiveParameters from './RTCRtpReceiveParameters';\nimport RTCRtpReceiver from './RTCRtpReceiver';\nimport RTCRtpSendParameters from './RTCRtpSendParameters';\nimport RTCRtpSender from './RTCRtpSender';\nimport RTCRtpTransceiver from './RTCRtpTransceiver';\nimport RTCSessionDescription, { RTCSessionDescriptionInit } from './RTCSessionDescription';\nimport RTCTrackEvent from './RTCTrackEvent';\nimport * as RTCUtil from './RTCUtil';\n\nconst log = new Logger('pc');\nconst { WebRTCModule } = NativeModules;\n\ntype RTCSignalingState =\n    | 'stable'\n    | 'have-local-offer'\n    | 'have-remote-offer'\n    | 'have-local-pranswer'\n    | 'have-remote-pranswer'\n    | 'closed';\n\ntype RTCIceGatheringState = 'new' | 'gathering' | 'complete';\n\ntype RTCPeerConnectionState = 'new' | 'connecting' | 'connected' | 'disconnected' | 'failed' | 'closed';\n\ntype RTCIceConnectionState = 'new' | 'checking' | 'connected' | 'completed' | 'failed' | 'disconnected' | 'closed';\n\ntype RTCDataChannelInit = {\n    ordered?: boolean,\n    maxPacketLifeTime?: number,\n    maxRetransmits?: number,\n    protocol?: string,\n    negotiated?: boolean,\n    id?: number\n};\n\nconst PEER_CONNECTION_EVENTS = [\n    'connectionstatechange',\n    'icecandidate',\n    'icecandidateerror',\n    'iceconnectionstatechange',\n    'icegatheringstatechange',\n    'negotiationneeded',\n    'signalingstatechange',\n    'datachannel',\n    'track',\n    'error'\n];\n\nlet nextPeerConnectionId = 0;\n\nexport default class RTCPeerConnection extends defineCustomEventTarget(...PEER_CONNECTION_EVENTS) {\n    localDescription: RTCSessionDescription | null = null;\n    remoteDescription: RTCSessionDescription | null = null;\n\n    signalingState: RTCSignalingState = 'stable';\n    iceGatheringState: RTCIceGatheringState = 'new';\n    connectionState: RTCPeerConnectionState = 'new';\n    iceConnectionState: RTCIceConnectionState = 'new';\n\n    _pcId: number;\n    _transceivers: { order: number, transceiver: RTCRtpTransceiver }[];\n    _remoteStreams: Map<string, MediaStream>;\n    _pendingTrackEvents: any[];\n\n    constructor(configuration) {\n        super();\n\n        this._pcId = nextPeerConnectionId++;\n        WebRTCModule.peerConnectionInit(configuration, this._pcId);\n\n        this._transceivers = [];\n        this._remoteStreams = new Map();\n        this._pendingTrackEvents = [];\n\n        this._registerEvents();\n\n        log.debug(`${this._pcId} ctor`);\n    }\n\n    async createOffer(options) {\n        log.debug(`${this._pcId} createOffer`);\n\n        const {\n            sdpInfo,\n            transceiversInfo\n        } = await WebRTCModule.peerConnectionCreateOffer(this._pcId, RTCUtil.normalizeOfferOptions(options));\n\n        log.debug(`${this._pcId} createOffer OK`);\n\n        this._updateTransceivers(transceiversInfo);\n\n        return sdpInfo;\n    }\n\n    async createAnswer() {\n        log.debug(`${this._pcId} createAnswer`);\n\n        const {\n            sdpInfo,\n            transceiversInfo\n        } = await WebRTCModule.peerConnectionCreateAnswer(this._pcId, {});\n\n        this._updateTransceivers(transceiversInfo);\n\n        return sdpInfo;\n    }\n\n    setConfiguration(configuration): void {\n        WebRTCModule.peerConnectionSetConfiguration(configuration, this._pcId);\n    }\n\n    async setLocalDescription(sessionDescription?: RTCSessionDescription | RTCSessionDescriptionInit): Promise<void> {\n        log.debug(`${this._pcId} setLocalDescription`);\n\n        let desc;\n\n        if (sessionDescription) {\n            desc = {\n                type: sessionDescription.type,\n                sdp: sessionDescription.sdp ?? ''\n            };\n\n            if (!RTCUtil.isSdpTypeValid(desc.type)) {\n                throw new Error(`Invalid session description: invalid type: ${desc.type}`);\n            }\n        } else {\n            desc = null;\n        }\n\n        const {\n            sdpInfo,\n            transceiversInfo\n        } = await WebRTCModule.peerConnectionSetLocalDescription(this._pcId, desc);\n\n        if (sdpInfo.type && sdpInfo.sdp) {\n            this.localDescription = new RTCSessionDescription(sdpInfo);\n        } else {\n            this.localDescription = null;\n        }\n\n        this._updateTransceivers(transceiversInfo, /* removeStopped */ desc?.type === 'answer');\n\n        log.debug(`${this._pcId} setLocalDescription OK`);\n    }\n\n    async setRemoteDescription(sessionDescription: RTCSessionDescription | RTCSessionDescriptionInit): Promise<void> {\n        log.debug(`${this._pcId} setRemoteDescription`);\n\n        if (!sessionDescription) {\n            return Promise.reject(new Error('No session description provided'));\n        }\n\n        const desc = {\n            type: sessionDescription.type,\n            sdp: sessionDescription.sdp ?? ''\n        };\n\n        if (!RTCUtil.isSdpTypeValid(desc.type ?? '')) {\n            throw new Error(`Invalid session description: invalid type: ${desc.type}`);\n        }\n\n        const {\n            sdpInfo,\n            newTransceivers,\n            transceiversInfo\n        } = await WebRTCModule.peerConnectionSetRemoteDescription(this._pcId, desc);\n\n        if (sdpInfo.type && sdpInfo.sdp) {\n            this.remoteDescription = new RTCSessionDescription(sdpInfo);\n        } else {\n            this.remoteDescription = null;\n        }\n\n        newTransceivers?.forEach(t => {\n            const { transceiverOrder, transceiver } = t;\n            const newSender = new RTCRtpSender({ ...transceiver.sender, track: null });\n            const remoteTrack\n                = transceiver.receiver.track ? new MediaStreamTrack(transceiver.receiver.track) : null;\n            const newReceiver = new RTCRtpReceiver({ ...transceiver.receiver, track: remoteTrack });\n            const newTransceiver = new RTCRtpTransceiver({\n                ...transceiver,\n                sender: newSender,\n                receiver: newReceiver,\n            });\n\n            this._insertTransceiverSorted(transceiverOrder, newTransceiver);\n        });\n\n        this._updateTransceivers(transceiversInfo, /* removeStopped */ desc.type === 'answer');\n\n        // Fire track events. They must fire before sRD resolves.\n        const pendingTrackEvents = this._pendingTrackEvents;\n\n        this._pendingTrackEvents = [];\n\n        for (const ev of pendingTrackEvents) {\n            const [ transceiver ] = this\n                .getTransceivers()\n                .filter(t => t.receiver.id ===  ev.receiver.id);\n\n            // We need to fire this event for an existing track sometimes, like\n            // when the transceiver direction (on the sending side) switches from\n            // sendrecv to recvonly and then back.\n\n            // @ts-ignore\n            const track: MediaStreamTrack = transceiver.receiver.track;\n\n            transceiver._mid = ev.transceiver.mid;\n            transceiver._currentDirection = ev.transceiver.currentDirection;\n            transceiver._direction = ev.transceiver.direction;\n\n            // Get the stream object from the event. Create if necessary.\n            const streams: MediaStream[] = ev.streams.map(streamInfo => {\n                // Here we are making sure that we don't create stream objects that already exist\n                // So that event listeners do get the same object if it has been created before.\n                if (!this._remoteStreams.has(streamInfo.streamId)) {\n                    const stream = new MediaStream({\n                        streamId: streamInfo.streamId,\n                        streamReactTag: streamInfo.streamReactTag,\n                        tracks: []\n                    });\n\n                    this._remoteStreams.set(streamInfo.streamId, stream);\n                }\n\n                const stream = this._remoteStreams.get(streamInfo.streamId);\n\n                if (!stream?._tracks.includes(track)) {\n                    stream?._tracks.push(track);\n                }\n\n                return stream;\n            });\n\n            const eventData = {\n                streams,\n                transceiver,\n                track,\n                receiver: transceiver.receiver\n            };\n\n            // @ts-ignore\n            this.dispatchEvent(new RTCTrackEvent('track', eventData));\n\n            streams.forEach(stream => {\n                // @ts-ignore\n                stream.dispatchEvent(new MediaStreamTrackEvent('addtrack', { track }));\n            });\n\n            // Dispatch an unmute event for the track.\n            track._setMutedInternal(false);\n        }\n\n        log.debug(`${this._pcId} setRemoteDescription OK`);\n    }\n\n    async addIceCandidate(candidate): Promise<void> {\n        log.debug(`${this._pcId} addIceCandidate`);\n\n        if (!candidate || !candidate.candidate) {\n            // XXX end-of candidates is not implemented: https://bugs.chromium.org/p/webrtc/issues/detail?id=9218\n            return;\n        }\n\n        if (\n            candidate.sdpMLineIndex === null ||\n            candidate.sdpMLineIndex === undefined ||\n            candidate.sdpMid === null ||\n            candidate.sdpMid === undefined\n        ) {\n            throw new TypeError('`sdpMLineIndex` and `sdpMid` must not null or undefined');\n        }\n\n        const newSdp = await WebRTCModule.peerConnectionAddICECandidate(\n            this._pcId,\n            candidate.toJSON ? candidate.toJSON() : candidate\n        );\n\n        this.remoteDescription = new RTCSessionDescription(newSdp);\n    }\n\n    /**\n     * @brief Adds a new track to the {@link RTCPeerConnection},\n     * and indicates that it is contained in the specified {@link MediaStream}s.\n     * This method has to be synchronous as the W3C API expects a track to be returned\n     * @param {MediaStreamTrack} track The track to be added\n     * @param {...MediaStream} streams One or more {@link MediaStream}s the track needs to be added to\n     * https://w3c.github.io/webrtc-pc/#dom-rtcpeerconnection-addtrack\n     */\n    addTrack(track: MediaStreamTrack, ...streams: MediaStream[]): RTCRtpSender {\n        log.debug(`${this._pcId} addTrack`);\n\n        if (this.connectionState === 'closed') {\n            throw new Error('Peer Connection is closed');\n        }\n\n        if (this._trackExists(track)) {\n            throw new Error('Track already exists in a sender');\n        }\n\n        const streamIds = streams.map(s => s.id);\n        const result = WebRTCModule.peerConnectionAddTrack(this._pcId, track.id, { streamIds });\n\n        if (result === null) {\n            throw new Error('Could not add sender');\n        }\n\n        const { transceiverOrder, transceiver, sender } = result;\n\n        // According to the W3C docs, the sender could have been reused, and\n        // so we check if that is the case, and update accordingly.\n        const [ existingSender ] = this\n            .getSenders()\n            .filter(s => s.id === sender.id);\n\n        if (existingSender) {\n            // Update sender\n            existingSender._track = track;\n\n            // Update the corresponding transceiver as well\n            const [ existingTransceiver ] = this\n                .getTransceivers()\n                .filter(t => t.sender.id === existingSender.id);\n\n            existingTransceiver._direction = transceiver.direction;\n            existingTransceiver._currentDirection = transceiver.currentDirection;\n\n            return existingSender;\n        }\n\n        // This is a new transceiver, should create a transceiver for it and add it\n        const newSender = new RTCRtpSender({ ...transceiver.sender, track });\n        const remoteTrack = transceiver.receiver.track ? new MediaStreamTrack(transceiver.receiver.track) : null;\n        const newReceiver = new RTCRtpReceiver({ ...transceiver.receiver, track: remoteTrack });\n        const newTransceiver = new RTCRtpTransceiver({\n            ...transceiver,\n            sender: newSender,\n            receiver: newReceiver,\n        });\n\n        this._insertTransceiverSorted(transceiverOrder, newTransceiver);\n\n        return newSender;\n    }\n\n    addTransceiver(source: 'audio' | 'video' | MediaStreamTrack, init): RTCRtpTransceiver {\n        log.debug(`${this._pcId} addTransceiver`);\n\n        let src = {};\n\n        if (source === 'audio') {\n            src = { type: 'audio' };\n        } else if (source === 'video') {\n            src = { type: 'video' };\n        } else {\n            src = { trackId: source.id };\n        }\n\n        // Extract the stream ids\n        if (init && init.streams) {\n            init.streamIds = init.streams.map(stream => stream.id);\n        }\n\n        const result = WebRTCModule.peerConnectionAddTransceiver(this._pcId, { ...src, init: { ...init } });\n\n        if (result === null) {\n            throw new Error('Transceiver could not be added');\n        }\n\n        const t = result.transceiver;\n        let track: MediaStreamTrack | null = null;\n\n        if (typeof source === 'string') {\n            if (t.sender.track) {\n                track = new MediaStreamTrack(t.sender.track);\n            }\n        } else {\n            // 'source' is a MediaStreamTrack\n            track = source;\n        }\n\n        const sender = new RTCRtpSender({ ...t.sender, track });\n        const remoteTrack = t.receiver.track ? new MediaStreamTrack(t.receiver.track) : null;\n        const receiver = new RTCRtpReceiver({ ...t.receiver, track: remoteTrack });\n        const transceiver = new RTCRtpTransceiver({\n            ...result.transceiver,\n            sender,\n            receiver\n        });\n\n        this._insertTransceiverSorted(result.transceiverOrder, transceiver);\n\n        return transceiver;\n    }\n\n    removeTrack(sender: RTCRtpSender) {\n        log.debug(`${this._pcId} removeTrack`);\n\n        if (this._pcId !== sender._peerConnectionId) {\n            throw new Error('Sender does not belong to this peer connection');\n        }\n\n        if (this.connectionState === 'closed') {\n            throw new Error('Peer Connection is closed');\n        }\n\n        const existingSender = this\n            .getSenders()\n            .find(s => s === sender);\n\n        if (!existingSender) {\n            throw new Error('Sender does not exist');\n        }\n\n        if (existingSender.track === null) {\n            return;\n        }\n\n        // Blocking!\n        WebRTCModule.peerConnectionRemoveTrack(this._pcId, sender.id);\n\n        existingSender._track = null;\n\n        const [ existingTransceiver ] = this\n            .getTransceivers()\n            .filter(t => t.sender.id === existingSender.id);\n\n        existingTransceiver._direction = existingTransceiver.direction === 'sendrecv' ? 'recvonly' : 'inactive';\n    }\n\n    async getStats(selector?: MediaStreamTrack) {\n        log.debug(`${this._pcId} getStats`);\n\n        if (!selector) {\n            const data = await WebRTCModule.peerConnectionGetStats(this._pcId);\n\n            /**\n             * On both Android and iOS it is faster to construct a single\n             * JSON string representing the Map of StatsReports and have it\n             * pass through the React Native bridge rather than the Map of\n             * StatsReports. While the implementations do try to be faster in\n             * general, the stress is on being faster to pass through the React\n             * Native bridge which is a bottleneck that tends to be visible in\n             * the UI when there is congestion involving UI-related passing.\n             */\n            return new Map(JSON.parse(data));\n        } else {\n            const senders = this.getSenders().filter(s => s.track === selector);\n            const receivers = this.getReceivers().filter(r => r.track === selector);\n            const matches = senders.length + receivers.length;\n\n            if (matches === 0) {\n                throw new Error('Invalid selector: could not find matching sender / receiver');\n            } else if (matches > 1) {\n                throw new Error('Invalid selector: multiple matching senders / receivers');\n            } else {\n                const sr = senders[0] || receivers[0];\n\n                return sr.getStats();\n            }\n        }\n    }\n\n    getTransceivers(): RTCRtpTransceiver[] {\n        return this._transceivers.map(e => e.transceiver);\n    }\n\n    getSenders(): RTCRtpSender[] {\n        // @ts-ignore\n        return this._transceivers.map(e => !e.transceiver.stopped && e.transceiver.sender).filter(Boolean);\n    }\n\n    getReceivers(): RTCRtpReceiver[] {\n        // @ts-ignore\n        return this._transceivers.map(e => !e.transceiver.stopped && e.transceiver.receiver).filter(Boolean);\n    }\n\n    close(): void {\n        log.debug(`${this._pcId} close`);\n\n        if (this.connectionState === 'closed') {\n            return;\n        }\n\n        WebRTCModule.peerConnectionClose(this._pcId);\n\n        // Mark transceivers as stopped.\n        this._transceivers.forEach(({ transceiver })=> {\n            transceiver._setStopped();\n        });\n    }\n\n    restartIce(): void {\n        WebRTCModule.peerConnectionRestartIce(this._pcId);\n    }\n\n    _registerEvents(): void {\n        addListener(this, 'peerConnectionOnRenegotiationNeeded', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            // @ts-ignore\n            this.dispatchEvent(new RTCEvent('negotiationneeded'));\n        });\n\n        addListener(this, 'peerConnectionIceConnectionChanged', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            this.iceConnectionState = ev.iceConnectionState;\n\n            // @ts-ignore\n            this.dispatchEvent(new RTCEvent('iceconnectionstatechange'));\n        });\n\n        addListener(this, 'peerConnectionStateChanged', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            this.connectionState = ev.connectionState;\n\n            // @ts-ignore\n            this.dispatchEvent(new RTCEvent('connectionstatechange'));\n\n            if (ev.connectionState === 'closed') {\n                // This PeerConnection is done, clean up.\n                removeListener(this);\n\n                WebRTCModule.peerConnectionDispose(this._pcId);\n            }\n        });\n\n        addListener(this, 'peerConnectionSignalingStateChanged', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            this.signalingState = ev.signalingState;\n            // @ts-ignore\n            this.dispatchEvent(new RTCEvent('signalingstatechange'));\n        });\n\n        // Consider moving away from this event: https://github.com/WebKit/WebKit/pull/3953\n        addListener(this, 'peerConnectionOnTrack', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            log.debug(`${this._pcId} ontrack`);\n\n            // NOTE: We need to make sure the track event fires right before sRD completes,\n            // so we queue them up here and dispatch the events when sRD fires, but before completing it.\n            // In the future we should probably implement out own logic and drop this event altogether.\n            this._pendingTrackEvents.push(ev);\n        });\n\n        addListener(this, 'peerConnectionOnRemoveTrack', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            log.debug(`${this._pcId} onremovetrack ${ev.receiverId}`);\n\n            const receiver = this.getReceivers().find(r => r.id === ev.receiverId);\n            const track = receiver?.track;\n\n            if (receiver && track) {\n                // As per the spec:\n                // - Remove the track from any media streams that were previously passed to the `track` event.\n                // https://w3c.github.io/webrtc-pc/#dom-rtcpeerconnection-removetrack,\n                // - Mark the track as muted:\n                // https://w3c.github.io/webrtc-pc/#process-remote-track-removal\n                for (const stream of this._remoteStreams.values()) {\n                    if (stream._tracks.includes(track)) {\n                        const trackIdx = stream._tracks.indexOf(track);\n\n                        log.debug(`${this._pcId} removetrack ${track.id}`);\n\n                        stream._tracks.splice(trackIdx, 1);\n\n                        // @ts-ignore\n                        stream.dispatchEvent(new MediaStreamTrackEvent('removetrack', { track }));\n\n                        // Dispatch a mute event for the track.\n                        track._setMutedInternal(true);\n                    }\n                }\n            }\n        });\n\n        addListener(this, 'peerConnectionGotICECandidate', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            const sdpInfo = ev.sdp;\n\n            // Can happen when doing a rollback.\n            if (sdpInfo.type && sdpInfo.sdp) {\n                this.localDescription = new RTCSessionDescription(sdpInfo);\n            } else {\n                this.localDescription = null;\n            }\n\n            const candidate = new RTCIceCandidate(ev.candidate);\n\n            // @ts-ignore\n            this.dispatchEvent(new RTCIceCandidateEvent('icecandidate', { candidate }));\n        });\n\n        addListener(this, 'peerConnectionIceGatheringChanged', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            this.iceGatheringState = ev.iceGatheringState;\n\n            if (this.iceGatheringState === 'complete') {\n                const sdpInfo = ev.sdp;\n\n                // Can happen when doing a rollback.\n                if (sdpInfo.type && sdpInfo.sdp) {\n                    this.localDescription = new RTCSessionDescription(sdpInfo);\n                } else {\n                    this.localDescription = null;\n                }\n\n                // @ts-ignore\n                this.dispatchEvent(new RTCIceCandidateEvent('icecandidate', { candidate: null }));\n            }\n\n            // @ts-ignore\n            this.dispatchEvent(new RTCEvent('icegatheringstatechange'));\n        });\n\n        addListener(this, 'peerConnectionDidOpenDataChannel', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            const channel = new RTCDataChannel(ev.dataChannel);\n\n            // @ts-ignore\n            this.dispatchEvent(new RTCDataChannelEvent('datachannel', { channel }));\n        });\n\n        addListener(this, 'mediaStreamTrackMuteChanged', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            const [\n                track\n            ] = this.getReceivers().map(r => r.track).filter(t => t?.id === ev.trackId);\n\n            if (track) {\n                track._setMutedInternal(ev.muted);\n            }\n        });\n    }\n\n    /**\n     * Creates a new RTCDataChannel object with the given label. The\n     * RTCDataChannelInit dictionary can be used to configure properties of the\n     * underlying channel such as data reliability.\n     *\n     * @param {string} label - the value with which the label attribute of the new\n     * instance is to be initialized\n     * @param {RTCDataChannelInit} dataChannelDict - an optional dictionary of\n     * values with which to initialize corresponding attributes of the new\n     * instance such as id\n     */\n    createDataChannel(label: string, dataChannelDict?: RTCDataChannelInit): RTCDataChannel {\n        if (dataChannelDict && 'id' in dataChannelDict) {\n            const id = dataChannelDict.id;\n\n            if (typeof id !== 'number') {\n                throw new TypeError('DataChannel id must be a number: ' + id);\n            }\n        }\n\n        const channelInfo = WebRTCModule.createDataChannel(this._pcId, label, dataChannelDict);\n\n        if (channelInfo === null) {\n            throw new TypeError('Failed to create new DataChannel');\n        }\n\n        return new RTCDataChannel(channelInfo);\n    }\n\n    /**\n     * Check whether a media stream track exists already in a sender.\n     * See https://w3c.github.io/webrtc-pc/#dom-rtcpeerconnection-addtrack for more information\n     */\n    _trackExists(track: MediaStreamTrack): boolean {\n        const [ sender ] = this\n            .getSenders()\n            .filter(\n                sender => sender.track?.id === track.id\n            );\n\n        return sender? true : false;\n    }\n\n    /**\n     * Updates transceivers after offer/answer updates if necessary.\n     */\n    _updateTransceivers(transceiverUpdates, removeStopped = false) {\n        for (const update of transceiverUpdates) {\n            const [ transceiver ] = this\n                .getTransceivers()\n                .filter(t => t.sender.id === update.transceiverId);\n\n            if (!transceiver) {\n                continue;\n            }\n\n            transceiver._currentDirection = update.currentDirection;\n            transceiver._mid = update.mid;\n            transceiver._stopped = Boolean(update.isStopped);\n            transceiver._sender._rtpParameters = new RTCRtpSendParameters(update.senderRtpParameters);\n            transceiver._receiver._rtpParameters = new RTCRtpReceiveParameters(update.receiverRtpParameters);\n        }\n\n        if (removeStopped) {\n            const stopped = this.getTransceivers().filter(t => t.stopped);\n            const newTransceivers = this._transceivers.filter(t => !stopped.includes(t.transceiver));\n\n            this._transceivers = newTransceivers;\n        }\n    }\n\n    /**\n     * Inserts transceiver into the transceiver array in the order they are created (timestamp).\n     * @param order an index that refers to when it it was created relatively.\n     * @param transceiver the transceiver object to be inserted.\n     */\n    _insertTransceiverSorted(order: number, transceiver: RTCRtpTransceiver) {\n        this._transceivers.push({ order, transceiver });\n        this._transceivers.sort((a, b) => a.order - b.order);\n    }\n}\n"],"mappings":"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"}