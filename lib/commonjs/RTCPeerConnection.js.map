{"version":3,"names":["_eventTargetShim","require","_reactNative","_EventEmitter","_Logger","_interopRequireDefault","_MediaStream","_MediaStreamTrack","_MediaStreamTrackEvent","_RTCDataChannel","_RTCDataChannelEvent","_RTCEvent","_RTCIceCandidate","_RTCIceCandidateEvent","_RTCRtpReceiveParameters","_RTCRtpReceiver","_RTCRtpSendParameters","_RTCRtpSender","_RTCRtpTransceiver","_RTCSessionDescription","_RTCTrackEvent","RTCUtil","_interopRequireWildcard","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_defineProperty","value","_toPropertyKey","enumerable","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","TypeError","Number","log","Logger","WebRTCModule","NativeModules","PEER_CONNECTION_EVENTS","nextPeerConnectionId","RTCPeerConnection","defineCustomEventTarget","constructor","configuration","_pcId","peerConnectionInit","_transceivers","_remoteStreams","Map","_pendingTrackEvents","_registerEvents","debug","createOffer","options","sdpInfo","transceiversInfo","peerConnectionCreateOffer","normalizeOfferOptions","_updateTransceivers","createAnswer","peerConnectionCreateAnswer","setConfiguration","peerConnectionSetConfiguration","setLocalDescription","sessionDescription","_desc","_sessionDescription$s","type","sdp","isSdpTypeValid","Error","peerConnectionSetLocalDescription","localDescription","RTCSessionDescription","setRemoteDescription","_sessionDescription$s2","_desc$type","Promise","reject","newTransceivers","peerConnectionSetRemoteDescription","remoteDescription","forEach","t","transceiverOrder","transceiver","newSender","RTCRtpSender","sender","track","remoteTrack","receiver","MediaStreamTrack","newReceiver","RTCRtpReceiver","newTransceiver","RTCRtpTransceiver","_insertTransceiverSorted","pendingTrackEvents","ev","getTransceivers","filter","id","_mid","mid","_currentDirection","currentDirection","_direction","direction","streams","map","streamInfo","streamId","stream","MediaStream","streamReactTag","tracks","_tracks","includes","push","eventData","dispatchEvent","RTCTrackEvent","MediaStreamTrackEvent","_setMutedInternal","addIceCandidate","candidate","sdpMLineIndex","sdpMid","newSdp","peerConnectionAddICECandidate","toJSON","addTrack","connectionState","_trackExists","_len","arguments","length","Array","_key","streamIds","s","result","peerConnectionAddTrack","existingSender","getSenders","_track","existingTransceiver","addTransceiver","source","init","src","trackId","peerConnectionAddTransceiver","removeTrack","_peerConnectionId","find","peerConnectionRemoveTrack","getStats","selector","data","peerConnectionGetStats","JSON","parse","senders","receivers","getReceivers","r","matches","sr","e","stopped","Boolean","close","peerConnectionClose","_ref","_setStopped","restartIce","peerConnectionRestartIce","addListener","pcId","RTCEvent","iceConnectionState","removeListener","peerConnectionDispose","signalingState","receiverId","values","trackIdx","indexOf","splice","RTCIceCandidate","RTCIceCandidateEvent","iceGatheringState","channel","RTCDataChannel","dataChannel","RTCDataChannelEvent","muted","createDataChannel","label","dataChannelDict","channelInfo","_sender$track","transceiverUpdates","removeStopped","update","transceiverId","_stopped","isStopped","_sender","_rtpParameters","RTCRtpSendParameters","senderRtpParameters","_receiver","RTCRtpReceiveParameters","receiverRtpParameters","order","sort","a","b","exports"],"sources":["RTCPeerConnection.ts"],"sourcesContent":["\nimport { defineCustomEventTarget } from 'event-target-shim';\nimport { NativeModules } from 'react-native';\n\nimport { addListener, removeListener } from './EventEmitter';\nimport Logger from './Logger';\nimport MediaStream from './MediaStream';\nimport MediaStreamTrack from './MediaStreamTrack';\nimport MediaStreamTrackEvent from './MediaStreamTrackEvent';\nimport RTCDataChannel from './RTCDataChannel';\nimport RTCDataChannelEvent from './RTCDataChannelEvent';\nimport RTCEvent from './RTCEvent';\nimport RTCIceCandidate from './RTCIceCandidate';\nimport RTCIceCandidateEvent from './RTCIceCandidateEvent';\nimport RTCRtpReceiveParameters from './RTCRtpReceiveParameters';\nimport RTCRtpReceiver from './RTCRtpReceiver';\nimport RTCRtpSendParameters from './RTCRtpSendParameters';\nimport RTCRtpSender from './RTCRtpSender';\nimport RTCRtpTransceiver from './RTCRtpTransceiver';\nimport RTCSessionDescription, { RTCSessionDescriptionInit } from './RTCSessionDescription';\nimport RTCTrackEvent from './RTCTrackEvent';\nimport * as RTCUtil from './RTCUtil';\n\nconst log = new Logger('pc');\nconst { WebRTCModule } = NativeModules;\n\ntype RTCSignalingState =\n    | 'stable'\n    | 'have-local-offer'\n    | 'have-remote-offer'\n    | 'have-local-pranswer'\n    | 'have-remote-pranswer'\n    | 'closed';\n\ntype RTCIceGatheringState = 'new' | 'gathering' | 'complete';\n\ntype RTCPeerConnectionState = 'new' | 'connecting' | 'connected' | 'disconnected' | 'failed' | 'closed';\n\ntype RTCIceConnectionState = 'new' | 'checking' | 'connected' | 'completed' | 'failed' | 'disconnected' | 'closed';\n\ntype RTCDataChannelInit = {\n    ordered?: boolean,\n    maxPacketLifeTime?: number,\n    maxRetransmits?: number,\n    protocol?: string,\n    negotiated?: boolean,\n    id?: number\n};\n\nconst PEER_CONNECTION_EVENTS = [\n    'connectionstatechange',\n    'icecandidate',\n    'icecandidateerror',\n    'iceconnectionstatechange',\n    'icegatheringstatechange',\n    'negotiationneeded',\n    'signalingstatechange',\n    'datachannel',\n    'track',\n    'error'\n];\n\nlet nextPeerConnectionId = 0;\n\nexport default class RTCPeerConnection extends defineCustomEventTarget(...PEER_CONNECTION_EVENTS) {\n    localDescription: RTCSessionDescription | null = null;\n    remoteDescription: RTCSessionDescription | null = null;\n\n    signalingState: RTCSignalingState = 'stable';\n    iceGatheringState: RTCIceGatheringState = 'new';\n    connectionState: RTCPeerConnectionState = 'new';\n    iceConnectionState: RTCIceConnectionState = 'new';\n\n    _pcId: number;\n    _transceivers: { order: number, transceiver: RTCRtpTransceiver }[];\n    _remoteStreams: Map<string, MediaStream>;\n    _pendingTrackEvents: any[];\n\n    constructor(configuration) {\n        super();\n\n        this._pcId = nextPeerConnectionId++;\n        WebRTCModule.peerConnectionInit(configuration, this._pcId);\n\n        this._transceivers = [];\n        this._remoteStreams = new Map();\n        this._pendingTrackEvents = [];\n\n        this._registerEvents();\n\n        log.debug(`${this._pcId} ctor`);\n    }\n\n    async createOffer(options) {\n        log.debug(`${this._pcId} createOffer`);\n\n        const {\n            sdpInfo,\n            transceiversInfo\n        } = await WebRTCModule.peerConnectionCreateOffer(this._pcId, RTCUtil.normalizeOfferOptions(options));\n\n        log.debug(`${this._pcId} createOffer OK`);\n\n        this._updateTransceivers(transceiversInfo);\n\n        return sdpInfo;\n    }\n\n    async createAnswer() {\n        log.debug(`${this._pcId} createAnswer`);\n\n        const {\n            sdpInfo,\n            transceiversInfo\n        } = await WebRTCModule.peerConnectionCreateAnswer(this._pcId, {});\n\n        this._updateTransceivers(transceiversInfo);\n\n        return sdpInfo;\n    }\n\n    setConfiguration(configuration): void {\n        WebRTCModule.peerConnectionSetConfiguration(configuration, this._pcId);\n    }\n\n    async setLocalDescription(sessionDescription?: RTCSessionDescription | RTCSessionDescriptionInit): Promise<void> {\n        log.debug(`${this._pcId} setLocalDescription`);\n\n        let desc;\n\n        if (sessionDescription) {\n            desc = {\n                type: sessionDescription.type,\n                sdp: sessionDescription.sdp ?? ''\n            };\n\n            if (!RTCUtil.isSdpTypeValid(desc.type)) {\n                throw new Error(`Invalid session description: invalid type: ${desc.type}`);\n            }\n        } else {\n            desc = null;\n        }\n\n        const {\n            sdpInfo,\n            transceiversInfo\n        } = await WebRTCModule.peerConnectionSetLocalDescription(this._pcId, desc);\n\n        if (sdpInfo.type && sdpInfo.sdp) {\n            this.localDescription = new RTCSessionDescription(sdpInfo);\n        } else {\n            this.localDescription = null;\n        }\n\n        this._updateTransceivers(transceiversInfo, /* removeStopped */ desc?.type === 'answer');\n\n        log.debug(`${this._pcId} setLocalDescription OK`);\n    }\n\n    async setRemoteDescription(sessionDescription: RTCSessionDescription | RTCSessionDescriptionInit): Promise<void> {\n        log.debug(`${this._pcId} setRemoteDescription`);\n\n        if (!sessionDescription) {\n            return Promise.reject(new Error('No session description provided'));\n        }\n\n        const desc = {\n            type: sessionDescription.type,\n            sdp: sessionDescription.sdp ?? ''\n        };\n\n        if (!RTCUtil.isSdpTypeValid(desc.type ?? '')) {\n            throw new Error(`Invalid session description: invalid type: ${desc.type}`);\n        }\n\n        const {\n            sdpInfo,\n            newTransceivers,\n            transceiversInfo\n        } = await WebRTCModule.peerConnectionSetRemoteDescription(this._pcId, desc);\n\n        if (sdpInfo.type && sdpInfo.sdp) {\n            this.remoteDescription = new RTCSessionDescription(sdpInfo);\n        } else {\n            this.remoteDescription = null;\n        }\n\n        newTransceivers?.forEach(t => {\n            const { transceiverOrder, transceiver } = t;\n            const newSender = new RTCRtpSender({ ...transceiver.sender, track: null });\n            const remoteTrack\n                = transceiver.receiver.track ? new MediaStreamTrack(transceiver.receiver.track) : null;\n            const newReceiver = new RTCRtpReceiver({ ...transceiver.receiver, track: remoteTrack });\n            const newTransceiver = new RTCRtpTransceiver({\n                ...transceiver,\n                sender: newSender,\n                receiver: newReceiver,\n            });\n\n            this._insertTransceiverSorted(transceiverOrder, newTransceiver);\n        });\n\n        this._updateTransceivers(transceiversInfo, /* removeStopped */ desc.type === 'answer');\n\n        // Fire track events. They must fire before sRD resolves.\n        const pendingTrackEvents = this._pendingTrackEvents;\n\n        this._pendingTrackEvents = [];\n\n        for (const ev of pendingTrackEvents) {\n            const [ transceiver ] = this\n                .getTransceivers()\n                .filter(t => t.receiver.id ===  ev.receiver.id);\n\n            // We need to fire this event for an existing track sometimes, like\n            // when the transceiver direction (on the sending side) switches from\n            // sendrecv to recvonly and then back.\n\n            // @ts-ignore\n            const track: MediaStreamTrack = transceiver.receiver.track;\n\n            transceiver._mid = ev.transceiver.mid;\n            transceiver._currentDirection = ev.transceiver.currentDirection;\n            transceiver._direction = ev.transceiver.direction;\n\n            // Get the stream object from the event. Create if necessary.\n            const streams: MediaStream[] = ev.streams.map(streamInfo => {\n                // Here we are making sure that we don't create stream objects that already exist\n                // So that event listeners do get the same object if it has been created before.\n                if (!this._remoteStreams.has(streamInfo.streamId)) {\n                    const stream = new MediaStream({\n                        streamId: streamInfo.streamId,\n                        streamReactTag: streamInfo.streamReactTag,\n                        tracks: []\n                    });\n\n                    this._remoteStreams.set(streamInfo.streamId, stream);\n                }\n\n                const stream = this._remoteStreams.get(streamInfo.streamId);\n\n                if (!stream?._tracks.includes(track)) {\n                    stream?._tracks.push(track);\n                }\n\n                return stream;\n            });\n\n            const eventData = {\n                streams,\n                transceiver,\n                track,\n                receiver: transceiver.receiver\n            };\n\n            // @ts-ignore\n            this.dispatchEvent(new RTCTrackEvent('track', eventData));\n\n            streams.forEach(stream => {\n                // @ts-ignore\n                stream.dispatchEvent(new MediaStreamTrackEvent('addtrack', { track }));\n            });\n\n            // Dispatch an unmute event for the track.\n            track._setMutedInternal(false);\n        }\n\n        log.debug(`${this._pcId} setRemoteDescription OK`);\n    }\n\n    async addIceCandidate(candidate): Promise<void> {\n        log.debug(`${this._pcId} addIceCandidate`);\n\n        if (!candidate || !candidate.candidate) {\n            // XXX end-of candidates is not implemented: https://bugs.chromium.org/p/webrtc/issues/detail?id=9218\n            return;\n        }\n\n        if (\n            candidate.sdpMLineIndex === null ||\n            candidate.sdpMLineIndex === undefined ||\n            candidate.sdpMid === null ||\n            candidate.sdpMid === undefined\n        ) {\n            throw new TypeError('`sdpMLineIndex` and `sdpMid` must not null or undefined');\n        }\n\n        const newSdp = await WebRTCModule.peerConnectionAddICECandidate(\n            this._pcId,\n            candidate.toJSON ? candidate.toJSON() : candidate\n        );\n\n        this.remoteDescription = new RTCSessionDescription(newSdp);\n    }\n\n    /**\n     * @brief Adds a new track to the {@link RTCPeerConnection},\n     * and indicates that it is contained in the specified {@link MediaStream}s.\n     * This method has to be synchronous as the W3C API expects a track to be returned\n     * @param {MediaStreamTrack} track The track to be added\n     * @param {...MediaStream} streams One or more {@link MediaStream}s the track needs to be added to\n     * https://w3c.github.io/webrtc-pc/#dom-rtcpeerconnection-addtrack\n     */\n    addTrack(track: MediaStreamTrack, ...streams: MediaStream[]): RTCRtpSender {\n        log.debug(`${this._pcId} addTrack`);\n\n        if (this.connectionState === 'closed') {\n            throw new Error('Peer Connection is closed');\n        }\n\n        if (this._trackExists(track)) {\n            throw new Error('Track already exists in a sender');\n        }\n\n        const streamIds = streams.map(s => s.id);\n        const result = WebRTCModule.peerConnectionAddTrack(this._pcId, track.id, { streamIds });\n\n        if (result === null) {\n            throw new Error('Could not add sender');\n        }\n\n        const { transceiverOrder, transceiver, sender } = result;\n\n        // According to the W3C docs, the sender could have been reused, and\n        // so we check if that is the case, and update accordingly.\n        const [ existingSender ] = this\n            .getSenders()\n            .filter(s => s.id === sender.id);\n\n        if (existingSender) {\n            // Update sender\n            existingSender._track = track;\n\n            // Update the corresponding transceiver as well\n            const [ existingTransceiver ] = this\n                .getTransceivers()\n                .filter(t => t.sender.id === existingSender.id);\n\n            existingTransceiver._direction = transceiver.direction;\n            existingTransceiver._currentDirection = transceiver.currentDirection;\n\n            return existingSender;\n        }\n\n        // This is a new transceiver, should create a transceiver for it and add it\n        const newSender = new RTCRtpSender({ ...transceiver.sender, track });\n        const remoteTrack = transceiver.receiver.track ? new MediaStreamTrack(transceiver.receiver.track) : null;\n        const newReceiver = new RTCRtpReceiver({ ...transceiver.receiver, track: remoteTrack });\n        const newTransceiver = new RTCRtpTransceiver({\n            ...transceiver,\n            sender: newSender,\n            receiver: newReceiver,\n        });\n\n        this._insertTransceiverSorted(transceiverOrder, newTransceiver);\n\n        return newSender;\n    }\n\n    addTransceiver(source: 'audio' | 'video' | MediaStreamTrack, init): RTCRtpTransceiver {\n        log.debug(`${this._pcId} addTransceiver`);\n\n        let src = {};\n\n        if (source === 'audio') {\n            src = { type: 'audio' };\n        } else if (source === 'video') {\n            src = { type: 'video' };\n        } else {\n            src = { trackId: source.id };\n        }\n\n        // Extract the stream ids\n        if (init && init.streams) {\n            init.streamIds = init.streams.map(stream => stream.id);\n        }\n\n        const result = WebRTCModule.peerConnectionAddTransceiver(this._pcId, { ...src, init: { ...init } });\n\n        if (result === null) {\n            throw new Error('Transceiver could not be added');\n        }\n\n        const t = result.transceiver;\n        let track: MediaStreamTrack | null = null;\n\n        if (typeof source === 'string') {\n            if (t.sender.track) {\n                track = new MediaStreamTrack(t.sender.track);\n            }\n        } else {\n            // 'source' is a MediaStreamTrack\n            track = source;\n        }\n\n        const sender = new RTCRtpSender({ ...t.sender, track });\n        const remoteTrack = t.receiver.track ? new MediaStreamTrack(t.receiver.track) : null;\n        const receiver = new RTCRtpReceiver({ ...t.receiver, track: remoteTrack });\n        const transceiver = new RTCRtpTransceiver({\n            ...result.transceiver,\n            sender,\n            receiver\n        });\n\n        this._insertTransceiverSorted(result.transceiverOrder, transceiver);\n\n        return transceiver;\n    }\n\n    removeTrack(sender: RTCRtpSender) {\n        log.debug(`${this._pcId} removeTrack`);\n\n        if (this._pcId !== sender._peerConnectionId) {\n            throw new Error('Sender does not belong to this peer connection');\n        }\n\n        if (this.connectionState === 'closed') {\n            throw new Error('Peer Connection is closed');\n        }\n\n        const existingSender = this\n            .getSenders()\n            .find(s => s === sender);\n\n        if (!existingSender) {\n            throw new Error('Sender does not exist');\n        }\n\n        if (existingSender.track === null) {\n            return;\n        }\n\n        // Blocking!\n        WebRTCModule.peerConnectionRemoveTrack(this._pcId, sender.id);\n\n        existingSender._track = null;\n\n        const [ existingTransceiver ] = this\n            .getTransceivers()\n            .filter(t => t.sender.id === existingSender.id);\n\n        existingTransceiver._direction = existingTransceiver.direction === 'sendrecv' ? 'recvonly' : 'inactive';\n    }\n\n    async getStats(selector?: MediaStreamTrack) {\n        log.debug(`${this._pcId} getStats`);\n\n        if (!selector) {\n            const data = await WebRTCModule.peerConnectionGetStats(this._pcId);\n\n            /**\n             * On both Android and iOS it is faster to construct a single\n             * JSON string representing the Map of StatsReports and have it\n             * pass through the React Native bridge rather than the Map of\n             * StatsReports. While the implementations do try to be faster in\n             * general, the stress is on being faster to pass through the React\n             * Native bridge which is a bottleneck that tends to be visible in\n             * the UI when there is congestion involving UI-related passing.\n             */\n            return new Map(JSON.parse(data));\n        } else {\n            const senders = this.getSenders().filter(s => s.track === selector);\n            const receivers = this.getReceivers().filter(r => r.track === selector);\n            const matches = senders.length + receivers.length;\n\n            if (matches === 0) {\n                throw new Error('Invalid selector: could not find matching sender / receiver');\n            } else if (matches > 1) {\n                throw new Error('Invalid selector: multiple matching senders / receivers');\n            } else {\n                const sr = senders[0] || receivers[0];\n\n                return sr.getStats();\n            }\n        }\n    }\n\n    getTransceivers(): RTCRtpTransceiver[] {\n        return this._transceivers.map(e => e.transceiver);\n    }\n\n    getSenders(): RTCRtpSender[] {\n        // @ts-ignore\n        return this._transceivers.map(e => !e.transceiver.stopped && e.transceiver.sender).filter(Boolean);\n    }\n\n    getReceivers(): RTCRtpReceiver[] {\n        // @ts-ignore\n        return this._transceivers.map(e => !e.transceiver.stopped && e.transceiver.receiver).filter(Boolean);\n    }\n\n    close(): void {\n        log.debug(`${this._pcId} close`);\n\n        if (this.connectionState === 'closed') {\n            return;\n        }\n\n        WebRTCModule.peerConnectionClose(this._pcId);\n\n        // Mark transceivers as stopped.\n        this._transceivers.forEach(({ transceiver })=> {\n            transceiver._setStopped();\n        });\n    }\n\n    restartIce(): void {\n        WebRTCModule.peerConnectionRestartIce(this._pcId);\n    }\n\n    _registerEvents(): void {\n        addListener(this, 'peerConnectionOnRenegotiationNeeded', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            // @ts-ignore\n            this.dispatchEvent(new RTCEvent('negotiationneeded'));\n        });\n\n        addListener(this, 'peerConnectionIceConnectionChanged', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            this.iceConnectionState = ev.iceConnectionState;\n\n            // @ts-ignore\n            this.dispatchEvent(new RTCEvent('iceconnectionstatechange'));\n        });\n\n        addListener(this, 'peerConnectionStateChanged', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            this.connectionState = ev.connectionState;\n\n            // @ts-ignore\n            this.dispatchEvent(new RTCEvent('connectionstatechange'));\n\n            if (ev.connectionState === 'closed') {\n                // This PeerConnection is done, clean up.\n                removeListener(this);\n\n                WebRTCModule.peerConnectionDispose(this._pcId);\n            }\n        });\n\n        addListener(this, 'peerConnectionSignalingStateChanged', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            this.signalingState = ev.signalingState;\n            // @ts-ignore\n            this.dispatchEvent(new RTCEvent('signalingstatechange'));\n        });\n\n        // Consider moving away from this event: https://github.com/WebKit/WebKit/pull/3953\n        addListener(this, 'peerConnectionOnTrack', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            log.debug(`${this._pcId} ontrack`);\n\n            // NOTE: We need to make sure the track event fires right before sRD completes,\n            // so we queue them up here and dispatch the events when sRD fires, but before completing it.\n            // In the future we should probably implement out own logic and drop this event altogether.\n            this._pendingTrackEvents.push(ev);\n        });\n\n        addListener(this, 'peerConnectionOnRemoveTrack', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            log.debug(`${this._pcId} onremovetrack ${ev.receiverId}`);\n\n            const receiver = this.getReceivers().find(r => r.id === ev.receiverId);\n            const track = receiver?.track;\n\n            if (receiver && track) {\n                // As per the spec:\n                // - Remove the track from any media streams that were previously passed to the `track` event.\n                // https://w3c.github.io/webrtc-pc/#dom-rtcpeerconnection-removetrack,\n                // - Mark the track as muted:\n                // https://w3c.github.io/webrtc-pc/#process-remote-track-removal\n                for (const stream of this._remoteStreams.values()) {\n                    if (stream._tracks.includes(track)) {\n                        const trackIdx = stream._tracks.indexOf(track);\n\n                        log.debug(`${this._pcId} removetrack ${track.id}`);\n\n                        stream._tracks.splice(trackIdx, 1);\n\n                        // @ts-ignore\n                        stream.dispatchEvent(new MediaStreamTrackEvent('removetrack', { track }));\n\n                        // Dispatch a mute event for the track.\n                        track._setMutedInternal(true);\n                    }\n                }\n            }\n        });\n\n        addListener(this, 'peerConnectionGotICECandidate', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            const sdpInfo = ev.sdp;\n\n            // Can happen when doing a rollback.\n            if (sdpInfo.type && sdpInfo.sdp) {\n                this.localDescription = new RTCSessionDescription(sdpInfo);\n            } else {\n                this.localDescription = null;\n            }\n\n            const candidate = new RTCIceCandidate(ev.candidate);\n\n            // @ts-ignore\n            this.dispatchEvent(new RTCIceCandidateEvent('icecandidate', { candidate }));\n        });\n\n        addListener(this, 'peerConnectionIceGatheringChanged', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            this.iceGatheringState = ev.iceGatheringState;\n\n            if (this.iceGatheringState === 'complete') {\n                const sdpInfo = ev.sdp;\n\n                // Can happen when doing a rollback.\n                if (sdpInfo.type && sdpInfo.sdp) {\n                    this.localDescription = new RTCSessionDescription(sdpInfo);\n                } else {\n                    this.localDescription = null;\n                }\n\n                // @ts-ignore\n                this.dispatchEvent(new RTCIceCandidateEvent('icecandidate', { candidate: null }));\n            }\n\n            // @ts-ignore\n            this.dispatchEvent(new RTCEvent('icegatheringstatechange'));\n        });\n\n        addListener(this, 'peerConnectionDidOpenDataChannel', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            const channel = new RTCDataChannel(ev.dataChannel);\n\n            // @ts-ignore\n            this.dispatchEvent(new RTCDataChannelEvent('datachannel', { channel }));\n        });\n\n        addListener(this, 'mediaStreamTrackMuteChanged', (ev: any) => {\n            if (ev.pcId !== this._pcId) {\n                return;\n            }\n\n            const [\n                track\n            ] = this.getReceivers().map(r => r.track).filter(t => t?.id === ev.trackId);\n\n            if (track) {\n                track._setMutedInternal(ev.muted);\n            }\n        });\n    }\n\n    /**\n     * Creates a new RTCDataChannel object with the given label. The\n     * RTCDataChannelInit dictionary can be used to configure properties of the\n     * underlying channel such as data reliability.\n     *\n     * @param {string} label - the value with which the label attribute of the new\n     * instance is to be initialized\n     * @param {RTCDataChannelInit} dataChannelDict - an optional dictionary of\n     * values with which to initialize corresponding attributes of the new\n     * instance such as id\n     */\n    createDataChannel(label: string, dataChannelDict?: RTCDataChannelInit): RTCDataChannel {\n        if (dataChannelDict && 'id' in dataChannelDict) {\n            const id = dataChannelDict.id;\n\n            if (typeof id !== 'number') {\n                throw new TypeError('DataChannel id must be a number: ' + id);\n            }\n        }\n\n        const channelInfo = WebRTCModule.createDataChannel(this._pcId, label, dataChannelDict);\n\n        if (channelInfo === null) {\n            throw new TypeError('Failed to create new DataChannel');\n        }\n\n        return new RTCDataChannel(channelInfo);\n    }\n\n    /**\n     * Check whether a media stream track exists already in a sender.\n     * See https://w3c.github.io/webrtc-pc/#dom-rtcpeerconnection-addtrack for more information\n     */\n    _trackExists(track: MediaStreamTrack): boolean {\n        const [ sender ] = this\n            .getSenders()\n            .filter(\n                sender => sender.track?.id === track.id\n            );\n\n        return sender? true : false;\n    }\n\n    /**\n     * Updates transceivers after offer/answer updates if necessary.\n     */\n    _updateTransceivers(transceiverUpdates, removeStopped = false) {\n        for (const update of transceiverUpdates) {\n            const [ transceiver ] = this\n                .getTransceivers()\n                .filter(t => t.sender.id === update.transceiverId);\n\n            if (!transceiver) {\n                continue;\n            }\n\n            transceiver._currentDirection = update.currentDirection;\n            transceiver._mid = update.mid;\n            transceiver._stopped = Boolean(update.isStopped);\n            transceiver._sender._rtpParameters = new RTCRtpSendParameters(update.senderRtpParameters);\n            transceiver._receiver._rtpParameters = new RTCRtpReceiveParameters(update.receiverRtpParameters);\n        }\n\n        if (removeStopped) {\n            const stopped = this.getTransceivers().filter(t => t.stopped);\n            const newTransceivers = this._transceivers.filter(t => !stopped.includes(t.transceiver));\n\n            this._transceivers = newTransceivers;\n        }\n    }\n\n    /**\n     * Inserts transceiver into the transceiver array in the order they are created (timestamp).\n     * @param order an index that refers to when it it was created relatively.\n     * @param transceiver the transceiver object to be inserted.\n     */\n    _insertTransceiverSorted(order: number, transceiver: RTCRtpTransceiver) {\n        this._transceivers.push({ order, transceiver });\n        this._transceivers.sort((a, b) => a.order - b.order);\n    }\n}\n"],"mappings":"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"}